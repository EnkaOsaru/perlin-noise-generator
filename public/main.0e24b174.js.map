{"version":3,"sources":["ts/noise.ts","ts/canvas.ts","ts/main.ts"],"names":[],"mappings":"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","file":"main.0e24b174.js","sourceRoot":"../page","sourcesContent":["export class PerlinNoise {\n  randoms: number[] = new Array(PerlinNoise.RANDOM_BUFFER_SIZE);\n\n  constructor() {\n    for (let i = 0; i < PerlinNoise.RANDOM_BUFFER_SIZE; i++) {\n      this.randoms[i] = Math.random();\n    }\n  }\n\n  at(x: number, y: number): number {\n    const gridX = Math.trunc(x);\n    const gridY = Math.trunc(y);\n    const gradients = [\n      this.getGradient(gridX, gridY),\n      this.getGradient(gridX + 1, gridY),\n      this.getGradient(gridX, gridY + 1),\n      this.getGradient(gridX + 1, gridY + 1)\n    ];\n\n    const decimalX = x - Math.trunc(x);\n    const decimalY = y - Math.trunc(y);\n    const distances: [number, number][] = [\n      [decimalX, decimalY],\n      [decimalX - 1, decimalY],\n      [decimalX, decimalY - 1],\n      [decimalX - 1, decimalY - 1]\n    ];\n\n    const dots = new Array<number>(4);\n    for (let i = 0; i < 4; i++) {\n      const [x1, y1] = gradients[i];\n      const [x2, y2] = distances[i];\n      dots[i] = x1 * x2 + y1 * y2;\n    }\n\n    const fade1 = PerlinNoise.fade(decimalX, dots[0], dots[1]);\n    const fade2 = PerlinNoise.fade(decimalX, dots[2], dots[3]);\n    const result = PerlinNoise.fade(decimalY, fade1, fade2);\n\n    return result * Math.SQRT2 / 2 + 0.5;\n  }\n\n  getGradient(x: number, y: number): [number, number] {\n    const index = (13 * x + 17 * y) % PerlinNoise.RANDOM_BUFFER_SIZE;\n    const angle = 2 * Math.PI * this.randoms[index];\n    return [Math.cos(angle), Math.sin(angle)];\n  }\n\n  static readonly RANDOM_BUFFER_SIZE = 256;\n\n  static fade(x: number, from: number, to: number): number {\n    const p = 6 * (x ** 5) - 15 * (x ** 4) + 10 * (x ** 3);\n    return (to - from) * p + from;\n  }\n}\n\nexport class PerlinNoiseStack {\n  depth: number;\n  corrector: number;\n  perlinNoises: PerlinNoise[];\n\n  constructor(depth: number) {\n    const r = PerlinNoiseStack.DECAY_FACTOR;\n    this.depth = depth;\n    this.corrector = ((1 / r) ** this.depth - 1) / (1 / r - 1);\n\n    this.perlinNoises = new Array(this.depth);\n    for (let i = 0; i < this.depth; i++) {\n      this.perlinNoises[i] = new PerlinNoise();\n    }\n  }\n\n  at(x: number, y: number): number {\n    let sum = 0;\n    for (let i = 0; i < this.depth; i++) {\n      const ratio = PerlinNoiseStack.DECAY_FACTOR ** i;\n      const value = this.perlinNoises[i].at(ratio * x, ratio * y);\n      sum += value / ratio;\n    }\n    return sum / this.corrector;\n  }\n\n  static readonly DECAY_FACTOR = 2;\n}","export class Canvas {\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n\n  constructor(selector: string) {\n    this.canvas = document.querySelector(selector);\n    this.context = this.canvas.getContext('2d');\n    this.setPixelRatio();\n  }\n\n  draw(drawer: (context: CanvasRenderingContext2D) => void) {\n    this.context.save();\n    drawer(this.context);\n    this.context.restore();\n  }\n\n  setPixelRatio() {\n    this.context.restore();\n    this.context.save();\n    this.context.scale(devicePixelRatio, devicePixelRatio);\n  }\n\n  setSize(width: number, height: number, pixelRatio: number = 1) {\n    this.canvas.width = width * pixelRatio;\n    this.canvas.height = height * pixelRatio;\n    this.canvas.style.width = width + 'px';\n    this.canvas.style.height = height + 'px';\n    this.setPixelRatio();\n  }\n}","import { PerlinNoiseStack } from './noise';\nimport { Canvas } from './canvas';\n\nconst canvas = new Canvas('canvas#renderer');\n\nconst form = document.querySelector('form');\nconst viewer = document.querySelector('#viewer');\nconst viewerImage = viewer.querySelector('#noise') as HTMLImageElement;\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const [resolution, depth, scale] = getFormValues(form) as number[];\n  const noise = new PerlinNoiseStack(depth);\n\n  canvas.setSize(resolution, resolution);\n\n  canvas.draw(context => {\n    for (let y = 0; y < resolution; y++) {\n      for (let x = 0; x < resolution; x++) {\n        const value = 255 * noise.at(scale * x, scale * y);\n        context.fillStyle = `rgb(${value}, ${value}, ${value})`;\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n  });\n\n  viewerImage.src = canvas.canvas.toDataURL();\n});\n\nfunction getFormValues(form: HTMLFormElement): (number | string)[] {\n  return [...form.querySelectorAll('input')]\n    .filter(e => e.type !== 'submit')\n    .map(e => e.value);\n}"]}